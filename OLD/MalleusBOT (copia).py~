import re
import os
import datetime
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError

# --- Configurazione del Bot ---
# ATTENZIONE: Assicurati che qui ci sia l'ID corretto della tua chat autorizzata!
# Se hai più chat, puoi aggiungerle come: AUTHORIZED_CHAT_IDS = [-123456789, -987654321]
AUTHORIZED_CHAT_IDS = [-1001299487305]

# LISTA DI PAROLE CHIAVE PROIBITE PER NOMI/BIO UTENTE
# Utilizziamo re.IGNORECASE per rendere la corrispondenza insensibile alle maiuscole/minuscole.
FORBIDDEN_KEYWORDS_NAME = [
    'porn', 'sex', 'xxx', 'adult', 'nude', 'erotic', 'viagra', 'cialis',
    'onlyfans', 'ofans', 'private', 'channel', 'bot'
]

# LISTA DI PAROLE SCURRILI PER I MESSAGGI
# Anche qui, usiamo re.IGNORECASE.
FORBIDDEN_KEYWORDS_MESSAGE = [
    # Aggiungi qui altre parole o frasi che vuoi censurare
    # Esempio: 'parolaccia1', 'parolaccia2'
]

# --- NUOVE VARIABILI DI CONFIGURAZIONE ---

# Orario di chiusura della chat (formato 24 ore)
CLOSING_START_HOUR = 23
CLOSING_START_MINUTE = 0
CLOSING_END_HOUR = 9
CLOSING_END_MINUTE = 0

# Lunghezza massima consentita per i messaggi (in caratteri)
MAX_MESSAGE_LENGTH = 1200 # Puoi modificare questo valore a tuo piacimento

# --- NUOVA LISTA DI CANALI DA CUI BLOCCARE GLI INOLTRI ---
# Inserisci qui gli ID numerici (negativi) dei canali da cui vuoi bloccare gli inoltri.
# Esempio: BLOCKED_FORWARD_CHANNEL_IDS = [-1001234567890, -1009876543210]
BLOCKED_FORWARD_CHANNEL_IDS = [] # <<< Inserisci QUI gli ID dei canali da bloccare!


# --- Funzioni di Utilità ---

def has_forbidden_chars(text: str) -> bool:
    """
    Verifica se il testo fornito contiene caratteri ebraici, arabi o cinesi.
    """
    # Il pattern è stato ottimizzato per essere più conciso.
    pattern = r'[\u0590-\u06FF\u4E00-\u9FFF]'
    return bool(re.search(pattern, text))

def contains_forbidden_keywords(text: str, keywords: list[str]) -> bool:
    """
    Verifica se il testo fornito contiene una delle parole chiave proibite.
    La ricerca è insensibile alle maiuscole/minuscole.
    """
    text_lower = text.lower()
    for keyword in keywords:
        if keyword.lower() in text_lower: # Assicurati che anche la keyword sia in minuscolo per il confronto
            return True
    return False

# --- Gestore dei Messaggi (Funzione Asincrona) ---

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Controllo preliminare per assicurarsi che il messaggio e l'utente esistano.
    if not update.message or not update.message.from_user:
        print("DEBUG: Messaggio o utente non validi. Ignorato.")
        return

    chat_id = update.message.chat_id
    message_id = update.message.message_id
    user = update.message.from_user
    message_text = update.message.text

    # 1. Controllo Autorizzazione Chat (DEVE ESSERE SEMPRE IL PRIMO)
    if chat_id not in AUTHORIZED_CHAT_IDS:
        print(f"DEBUG: Messaggio nella chat NON AUTORIZZATA {chat_id}. Ignorato.")
        return

    # Estrai full_name, username e user_identifier subito.
    full_name = user.full_name or "Utente Sconosciuto" # Gestisce il caso in cui full_name sia None
    username = user.username
    user_identifier = f"{full_name} (@{username})" if username else full_name

    # 2. Ottieni lo status dell'utente nella chat
    try:
        user_member = await context.bot.get_chat_member(chat_id=chat_id, user_id=user.id)
        user_status = user_member.status
    except TelegramError as e:
        print(f"ERRORE di Telegram nel recupero dello status dell'utente {user.id}: {e}")
        # Se non riusciamo a ottenere lo status, non possiamo applicare le regole, quindi usciamo.
        return

    # Se l'utente è un amministratore o il creatore della chat, non applicare le restrizioni.
    if user_status in ["administrator", "creator"]:
        print(f"DEBUG: Utente {user_identifier} (ID: {user.id}) è un amministratore/creatore. Esentato dalle restrizioni.")
        return # Gli admin possono fare quello che vogliono, non processiamo oltre per loro

    # --- Inizio Controlli per Utenti NON Admin ---

    # 3. Controllo Inoltro da Canale Proibito
    # Aggiunto un controllo per assicurarsi che update.message.forward_from_chat esista prima di accedervi.
    if update.message and update.message.forward_from_chat:
        forwarded_channel_id = update.message.forward_from_chat.id
        if forwarded_channel_id in BLOCKED_FORWARD_CHANNEL_IDS:
            print(f"ATTENZIONE: Messaggio inoltrato dal canale proibito '{forwarded_channel_id}'. Eliminazione messaggio {message_id} nella chat {chat_id}.")
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id)

                # Controlla se il messaggio originale conteneva un link esplicito
                message_has_link = False
                if update.message.entities:
                    for entity in update.message.entities:
                        if entity.type in ['url', 'text_link']:
                            message_has_link = True
                            break

                # Scegli il messaggio di avviso in base alla presenza del link
                if message_has_link:
                    warning_text = f"**Attenzione {full_name}!** L'inoltro di link da questo canale non è consentito e il tuo messaggio è stato eliminato."
                else:
                    warning_text = f"**Attenzione {full_name}!** I messaggi inoltrati da questo canale non sono consentiti e sono stati eliminati."

                await context.bot.send_message(
                    chat_id=chat_id,
                    text=warning_text,
                    parse_mode='Markdown'
                )
                print(f"DEBUG: Messaggio di notifica inoltro proibito inviato nella chat {chat_id}.")
            except TelegramError as e:
                print(f"ERRORE di Telegram durante l'eliminazione/notifica messaggio da canale proibito: {e}")
                if "not enough rights" in str(e).lower():
                    print("ERRORE: Il bot non ha i permessi per eliminare messaggi o inviare messaggi. Assicurati che il bot sia amministratore con i permessi necessari.")
            return # Termina la funzione dopo aver agito

    # 4. Controllo Orario di Chiusura della Chat
    now = datetime.datetime.now().time()
    start_time = datetime.time(CLOSING_START_HOUR, CLOSING_START_MINUTE)
    end_time = datetime.time(CLOSING_END_HOUR, CLOSING_END_MINUTE)

    is_during_closing_hours = False
    if start_time < end_time: # Orario di chiusura non a cavallo della mezzanotte (es. 09:00 - 17:00)
        if start_time <= now < end_time:
            is_during_closing_hours = True
    else: # Orario di chiusura a cavallo della mezzanotte (es. 23:00 - 09:00)
        if now >= start_time or now < end_time:
            is_during_closing_hours = True

    if is_during_closing_hours:
        print(f"DEBUG: Messaggio inviato durante l'orario di chiusura ({now}). Eliminazione messaggio {message_id} nella chat {chat_id}.")
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            await context.bot.send_message(
                chat_id=chat_id,
                text="La chat è chiusa in questo momento. I messaggi sono disabilitati.",
                parse_mode='Markdown'
            )
            print(f"DEBUG: Messaggio di notifica orario di chiusura inviato nella chat {chat_id}.")
        except TelegramError as e:
            print(f"ERRORE di Telegram durante l'eliminazione/notifica messaggio orario di chiusura: {e}")
            if "not enough rights" in str(e).lower():
                print("ERRORE: Il bot non ha i permessi per eliminare messaggi o inviare messaggi. Assicurati che il bot sia amministratore con i permessi necessari.")
        return

    # 5. Controllo Lunghezza Messaggio
    if message_text and len(message_text) > MAX_MESSAGE_LENGTH:
        print(f"DEBUG: Messaggio troppo lungo ({len(message_text)} caratteri). Eliminazione messaggio {message_id} nella chat {chat_id}.")
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"{full_name}, il tuo messaggio è troppo lungo ({len(message_text)}/{MAX_MESSAGE_LENGTH} caratteri). Per favor, sii più conciso.",
                parse_mode='Markdown'
            )
            print(f"DEBUG: Messaggio di notifica lunghezza inviato nella chat {chat_id}.")
        except TelegramError as e:
            print(f"ERRORE di Telegram durante l'eliminazione/notifica messaggio troppo lungo: {e}")
            if "not enough rights" in str(e).lower():
                print("ERRORE: Il bot non ha i permessi per eliminare messaggi o inviare messaggi. Assicurati che il bot sia amministratore con i permessi necessari.")
        return

    # 6. Controllo: Parole scurrili nel messaggio
    if message_text and contains_forbidden_keywords(message_text, FORBIDDEN_KEYWORDS_MESSAGE):
        print(f"ATTENZIONE: Trovate parole scurrili nel messaggio di '{user_identifier}' (ID: {user.id}). Eliminazione messaggio {message_id} e ammonizione.")
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"**Ammonizione per {full_name}!** Il tuo messaggio conteneva termini non appropriati ed è stato eliminato. Per favore, mantieni un linguaggio rispettoso.",
                parse_mode='Markdown'
            )
            print(f"DEBUG: Messaggio di ammonizione inviato nella chat {chat_id}.")
        except TelegramError as e:
            print(f"ERRORE di Telegram durante l'eliminazione/ammonizione per parole scurrili: {e}")
            if "not enough rights" in str(e).lower():
                print("ERRORE: Il bot non ha i permessi per eliminare messaggi o inviare messaggi. Assicurati che il bot sia amministratore con i permessi necessari.")
        return

    # --- Controlli su Nome/Username Utente (dopo i nuovi filtri per utenti NON admin) ---

    # Controllo: Parole chiave proibite nel nome/username
    if contains_forbidden_keywords(user_identifier, FORBIDDEN_KEYWORDS_NAME):
        print(f"ATTENZIONE: Trovate parole chiave proibite nell'identificativo utente '{user_identifier}' (ID: {user.id}) nella chat {chat_id}. Tentativo di azione.")
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            await context.bot.ban_chat_member(chat_id=chat_id, user_id=user.id)
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"L'utente {user_identifier} è stato rimosso per aver utilizzato termini non consentiti nel proprio identificativo.",
                parse_mode='Markdown'
            )
        except TelegramError as e:
            print(f"ERRORE di Telegram (parole chiave proibite) durante la gestione di '{user_identifier}' (ID: {user.id}): {e}")
            if "not enough rights" in str(e).lower():
                print("ERRORE: Il bot non ha i permessi sufficienti per bannare o inviare messaggi. Assicurati che il bot sia amministratore con i permessi necessari.")
        return

    # Controllo: Caratteri ebraici, arabi o cinesi nel nome completo
    if has_forbidden_chars(full_name):
        print(f"ATTENZIONE: Trovati caratteri proibiti nel nome dell'utente '{full_name}' (ID: {user.id}) nella chat {chat_id}. Tentativo di azione.")
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            await context.bot.ban_chat_member(chat_id=chat_id, user_id=user.id)
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"Damnatus est de blasphemia et brachio saeculari tradimus 🔥 {full_name}",
                parse_mode='Markdown'
            )
        except TelegramError as e:
            print(f"ERRORE di Telegram (caratteri proibiti) durante la gestione di '{full_name}' (ID: {user.id}): {e}")
            if "not enough rights" in str(e).lower():
                print("ERRORE: Il bot non ha i permessi sufficienti per bannare o inviare messaggi. Assicurati che il bot sia amministratore con i permessi necessari.")
        return


# --- Funzione Principale (Invariata) ---
def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("ERRORE: Variabile d'ambiente 'TELEGRAM_BOT_TOKEN' non trovata. Assicurati di averla impostata.")
        return
    print("DEBUG: Avvio del bot...")
    application = Application.builder().token(token).build()
    # Registra l'handler per tutti i messaggi di testo che non sono comandi.
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("DEBUG: Bot avviato e in ascolto. Premi Ctrl+C per fermarlo.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)
    print("DEBUG: Bot fermato.")

if __name__ == '__main__':
    main()